import os
import shutil

rule semi_coherent_filter:
    input:
                "EPIC/EVGEN/CI/SEMI_COHERENT/eU_0.hepmc"
    output:
        "benchmarks/Exclusive-Diffraction-Tagging/semi_coherent/filtered.hepmc",
    shell:
        """
python3 benchmarks/Exclusive-Diffraction-Tagging/semi_coherent/filter.py {input} {output}
"""

rule semi_coherent_afterburner:
    input:
        "benchmarks/Exclusive-Diffraction-Tagging/semi_coherent/filtered.hepmc",
    output:
        "benchmarks/Exclusive-Diffraction-Tagging/semi_coherent/filtered_ab.hepmc.hepmc",
    shell:
        """
abconv {input} -p 2 --output benchmarks/Exclusive-Diffraction-Tagging/semi_coherent/filtered_ab.hepmc
"""
    
rule semi_coherent_sim:
    input:
        hepmcfile="benchmarks/Exclusive-Diffraction-Tagging/semi_coherent/filtered_ab.hepmc.hepmc",
        warmup="warmup/{DETECTOR_CONFIG}.edm4hep.root",
    output:
        "sim_output/semi_coherent/{DETECTOR_CONFIG}_semi_coherent.edm4hep.root",
    log:
        "sim_output/semi_coherent/{DETECTOR_CONFIG}_semi_coherent.edm4hep.root.log",
    params:
        N_EVENTS=1000,
        SEED=1,
        DETECTOR_PATH=os.environ["DETECTOR_PATH"],
        DETECTOR_CONFIG=lambda wildcards: wildcards.DETECTOR_CONFIG,
        DD4HEP_HASH=get_spack_package_hash("dd4hep"),
        NPSIM_HASH=get_spack_package_hash("npsim"),
    cache: True
    shell:
        """
npsim \
  --inputFiles {input.hepmcfile} \
  --compactFile {params.DETECTOR_PATH}/{params.DETECTOR_CONFIG}.xml \
  --numberOfEvents {params.N_EVENTS} \
  --random.seed {params.SEED} \
  --outputFile {output}
"""

rule semi_coherent_reco:
    input:
        "sim_output/semi_coherent/{DETECTOR_CONFIG}_semi_coherent.edm4hep.root",
    output:
        "sim_output/semi_coherent/{DETECTOR_CONFIG}_semi_coherent.eicrecon.tree.edm4eic.root",
    log:
        "sim_output/semi_coherent/{DETECTOR_CONFIG}_semi_coherent.eicrecon.tree.edm4eic.root.log",
    params:
        DETECTOR_CONFIG=lambda wildcards: wildcards.DETECTOR_CONFIG,
        EICRECON_HASH=get_spack_package_hash("eicrecon"),
    cache: True
    shell:
        """
DETECTOR_CONFIG={params.DETECTOR_CONFIG} eicrecon {input} -Ppodio:output_collections=HcalFarForwardZDCRawHits,HcalFarForwardZDCRecHits,HcalFarForwardZDCClusters,EcalFarForwardZDCRawHits,EcalFarForwardZDCRecHits,EcalFarForwardZDCClusters,MCParticles -Ppodio:output_file={output}
"""

rule semi_coherent_analysis:
    input:
        expand("sim_output/semi_coherent/{{DETECTOR_CONFIG}}_semi_coherent.eicrecon.tree.edm4eic.root"),
        scripts="benchmarks/Exclusive-Diffraction-Tagging/semi_coherent/analysis/analysis.py",
    output:
        "results/{DETECTOR_CONFIG}/semi_coherent/plots.pdf",
    shell:
        """
DETECTOR_CONFIG={wildcards.DETECTOR_CONFIG} \
python {input.scripts}
"""

rule run_all_locally:
    input:
        "results/" + os.environ["DETECTOR_CONFIG"] + "/semi_coherent/plots.pdf",
    message:
        "See output in {input[0]}"
